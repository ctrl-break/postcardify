/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { usageControllerCreate } from '../fn/usage/usage-controller-create';
import { UsageControllerCreate$Params } from '../fn/usage/usage-controller-create';
import { usageControllerFindUserWordUsages } from '../fn/usage/usage-controller-find-user-word-usages';
import { UsageControllerFindUserWordUsages$Params } from '../fn/usage/usage-controller-find-user-word-usages';
import { usageControllerFindWordUsages } from '../fn/usage/usage-controller-find-word-usages';
import { UsageControllerFindWordUsages$Params } from '../fn/usage/usage-controller-find-word-usages';
import { usageControllerRemove } from '../fn/usage/usage-controller-remove';
import { UsageControllerRemove$Params } from '../fn/usage/usage-controller-remove';
import { usageControllerUpdate } from '../fn/usage/usage-controller-update';
import { UsageControllerUpdate$Params } from '../fn/usage/usage-controller-update';
import { WordUsageDto } from '../models/word-usage-dto';

@Injectable({ providedIn: 'root' })
export class UsageService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `usageControllerCreate()` */
    static readonly UsageControllerCreatePath = '/api/v1/words/usage';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usageControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usageControllerCreate$Response(
        params: UsageControllerCreate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordUsageDto>> {
        return usageControllerCreate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usageControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usageControllerCreate(params: UsageControllerCreate$Params, context?: HttpContext): Observable<WordUsageDto> {
        return this.usageControllerCreate$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordUsageDto>): WordUsageDto => r.body),
        );
    }

    /** Path part for operation `usageControllerFindWordUsages()` */
    static readonly UsageControllerFindWordUsagesPath = '/api/v1/words/usage/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usageControllerFindWordUsages()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerFindWordUsages$Response(
        params: UsageControllerFindWordUsages$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<WordUsageDto>>> {
        return usageControllerFindWordUsages(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usageControllerFindWordUsages$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerFindWordUsages(
        params: UsageControllerFindWordUsages$Params,
        context?: HttpContext,
    ): Observable<Array<WordUsageDto>> {
        return this.usageControllerFindWordUsages$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<WordUsageDto>>): Array<WordUsageDto> => r.body),
        );
    }

    /** Path part for operation `usageControllerUpdate()` */
    static readonly UsageControllerUpdatePath = '/api/v1/words/usage/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usageControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usageControllerUpdate$Response(
        params: UsageControllerUpdate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordUsageDto>> {
        return usageControllerUpdate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usageControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usageControllerUpdate(params: UsageControllerUpdate$Params, context?: HttpContext): Observable<WordUsageDto> {
        return this.usageControllerUpdate$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordUsageDto>): WordUsageDto => r.body),
        );
    }

    /** Path part for operation `usageControllerRemove()` */
    static readonly UsageControllerRemovePath = '/api/v1/words/usage/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usageControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerRemove$Response(
        params: UsageControllerRemove$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordUsageDto>> {
        return usageControllerRemove(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usageControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerRemove(params: UsageControllerRemove$Params, context?: HttpContext): Observable<WordUsageDto> {
        return this.usageControllerRemove$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordUsageDto>): WordUsageDto => r.body),
        );
    }

    /** Path part for operation `usageControllerFindUserWordUsages()` */
    static readonly UsageControllerFindUserWordUsagesPath = '/api/v1/words/usage/{id}/user';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usageControllerFindUserWordUsages()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerFindUserWordUsages$Response(
        params: UsageControllerFindUserWordUsages$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<WordUsageDto>>> {
        return usageControllerFindUserWordUsages(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usageControllerFindUserWordUsages$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usageControllerFindUserWordUsages(
        params: UsageControllerFindUserWordUsages$Params,
        context?: HttpContext,
    ): Observable<Array<WordUsageDto>> {
        return this.usageControllerFindUserWordUsages$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<WordUsageDto>>): Array<WordUsageDto> => r.body),
        );
    }
}
