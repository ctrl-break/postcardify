/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ImageDto } from '../models/image-dto';
import { wordControllerCreate } from '../fn/word/word-controller-create';
import { WordControllerCreate$Params } from '../fn/word/word-controller-create';
import { wordControllerFindOne } from '../fn/word/word-controller-find-one';
import { WordControllerFindOne$Params } from '../fn/word/word-controller-find-one';
import { wordControllerFindOneAndUpdateImage } from '../fn/word/word-controller-find-one-and-update-image';
import { WordControllerFindOneAndUpdateImage$Params } from '../fn/word/word-controller-find-one-and-update-image';
import { wordControllerFindPagedWords } from '../fn/word/word-controller-find-paged-words';
import { WordControllerFindPagedWords$Params } from '../fn/word/word-controller-find-paged-words';
import { wordControllerGetRandomWord } from '../fn/word/word-controller-get-random-word';
import { WordControllerGetRandomWord$Params } from '../fn/word/word-controller-get-random-word';
import { wordControllerRemove } from '../fn/word/word-controller-remove';
import { WordControllerRemove$Params } from '../fn/word/word-controller-remove';
import { wordControllerUpdate } from '../fn/word/word-controller-update';
import { WordControllerUpdate$Params } from '../fn/word/word-controller-update';
import { WordDto } from '../models/word-dto';

@Injectable({ providedIn: 'root' })
export class WordService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `wordControllerFindPagedWords()` */
    static readonly WordControllerFindPagedWordsPath = '/api/v1/words/word';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerFindPagedWords()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindPagedWords$Response(
        params: WordControllerFindPagedWords$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<WordDto>>> {
        return wordControllerFindPagedWords(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerFindPagedWords$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindPagedWords(
        params: WordControllerFindPagedWords$Params,
        context?: HttpContext,
    ): Observable<Array<WordDto>> {
        return this.wordControllerFindPagedWords$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<WordDto>>): Array<WordDto> => r.body),
        );
    }

    /** Path part for operation `wordControllerCreate()` */
    static readonly WordControllerCreatePath = '/api/v1/words/word';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    wordControllerCreate$Response(
        params: WordControllerCreate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordDto>> {
        return wordControllerCreate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    wordControllerCreate(params: WordControllerCreate$Params, context?: HttpContext): Observable<WordDto> {
        return this.wordControllerCreate$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordDto>): WordDto => r.body),
        );
    }

    /** Path part for operation `wordControllerFindOneAndUpdateImage()` */
    static readonly WordControllerFindOneAndUpdateImagePath = '/api/v1/words/word/{id}/update-image';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerFindOneAndUpdateImage()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindOneAndUpdateImage$Response(
        params: WordControllerFindOneAndUpdateImage$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<ImageDto>> {
        return wordControllerFindOneAndUpdateImage(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerFindOneAndUpdateImage$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindOneAndUpdateImage(
        params: WordControllerFindOneAndUpdateImage$Params,
        context?: HttpContext,
    ): Observable<ImageDto> {
        return this.wordControllerFindOneAndUpdateImage$Response(params, context).pipe(
            map((r: StrictHttpResponse<ImageDto>): ImageDto => r.body),
        );
    }

    /** Path part for operation `wordControllerFindOne()` */
    static readonly WordControllerFindOnePath = '/api/v1/words/word/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindOne$Response(
        params: WordControllerFindOne$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordDto>> {
        return wordControllerFindOne(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerFindOne(params: WordControllerFindOne$Params, context?: HttpContext): Observable<WordDto> {
        return this.wordControllerFindOne$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordDto>): WordDto => r.body),
        );
    }

    /** Path part for operation `wordControllerUpdate()` */
    static readonly WordControllerUpdatePath = '/api/v1/words/word/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    wordControllerUpdate$Response(
        params: WordControllerUpdate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordDto>> {
        return wordControllerUpdate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    wordControllerUpdate(params: WordControllerUpdate$Params, context?: HttpContext): Observable<WordDto> {
        return this.wordControllerUpdate$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordDto>): WordDto => r.body),
        );
    }

    /** Path part for operation `wordControllerRemove()` */
    static readonly WordControllerRemovePath = '/api/v1/words/word/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerRemove$Response(
        params: WordControllerRemove$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordDto>> {
        return wordControllerRemove(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerRemove(params: WordControllerRemove$Params, context?: HttpContext): Observable<WordDto> {
        return this.wordControllerRemove$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordDto>): WordDto => r.body),
        );
    }

    /** Path part for operation `wordControllerGetRandomWord()` */
    static readonly WordControllerGetRandomWordPath = '/api/v1/words/word/random';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `wordControllerGetRandomWord()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerGetRandomWord$Response(
        params?: WordControllerGetRandomWord$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<WordDto>> {
        return wordControllerGetRandomWord(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `wordControllerGetRandomWord$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    wordControllerGetRandomWord(
        params?: WordControllerGetRandomWord$Params,
        context?: HttpContext,
    ): Observable<WordDto> {
        return this.wordControllerGetRandomWord$Response(params, context).pipe(
            map((r: StrictHttpResponse<WordDto>): WordDto => r.body),
        );
    }
}
