/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { settingsControllerGetUserSettings } from '../fn/settings/settings-controller-get-user-settings';
import { SettingsControllerGetUserSettings$Params } from '../fn/settings/settings-controller-get-user-settings';
import { UserSettingDto } from '../models/user-setting-dto';

@Injectable({ providedIn: 'root' })
export class SettingsService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `settingsControllerGetUserSettings()` */
    static readonly SettingsControllerGetUserSettingsPath = '/api/v1/profile/settings';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `settingsControllerGetUserSettings()` instead.
     *
     * This method doesn't expect any request body.
     */
    settingsControllerGetUserSettings$Response(
        params?: SettingsControllerGetUserSettings$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<UserSettingDto>>> {
        return settingsControllerGetUserSettings(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `settingsControllerGetUserSettings$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    settingsControllerGetUserSettings(
        params?: SettingsControllerGetUserSettings$Params,
        context?: HttpContext,
    ): Observable<Array<UserSettingDto>> {
        return this.settingsControllerGetUserSettings$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<UserSettingDto>>): Array<UserSettingDto> => r.body),
        );
    }
}
