/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { vocabularyControllerCreate } from '../fn/vocabulary/vocabulary-controller-create';
import { VocabularyControllerCreate$Params } from '../fn/vocabulary/vocabulary-controller-create';
import { vocabularyControllerFindOne } from '../fn/vocabulary/vocabulary-controller-find-one';
import { VocabularyControllerFindOne$Params } from '../fn/vocabulary/vocabulary-controller-find-one';
import { vocabularyControllerGetUserVocabulary } from '../fn/vocabulary/vocabulary-controller-get-user-vocabulary';
import { VocabularyControllerGetUserVocabulary$Params } from '../fn/vocabulary/vocabulary-controller-get-user-vocabulary';
import { vocabularyControllerRemove } from '../fn/vocabulary/vocabulary-controller-remove';
import { VocabularyControllerRemove$Params } from '../fn/vocabulary/vocabulary-controller-remove';
import { vocabularyControllerUpdate } from '../fn/vocabulary/vocabulary-controller-update';
import { VocabularyControllerUpdate$Params } from '../fn/vocabulary/vocabulary-controller-update';
import { VocabularyDto } from '../models/vocabulary-dto';

@Injectable({ providedIn: 'root' })
export class VocabularyService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `vocabularyControllerGetUserVocabulary()` */
    static readonly VocabularyControllerGetUserVocabularyPath = '/api/v1/words/vocabulary';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vocabularyControllerGetUserVocabulary()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerGetUserVocabulary$Response(
        params?: VocabularyControllerGetUserVocabulary$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<VocabularyDto>>> {
        return vocabularyControllerGetUserVocabulary(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vocabularyControllerGetUserVocabulary$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerGetUserVocabulary(
        params?: VocabularyControllerGetUserVocabulary$Params,
        context?: HttpContext,
    ): Observable<Array<VocabularyDto>> {
        return this.vocabularyControllerGetUserVocabulary$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<VocabularyDto>>): Array<VocabularyDto> => r.body),
        );
    }

    /** Path part for operation `vocabularyControllerCreate()` */
    static readonly VocabularyControllerCreatePath = '/api/v1/words/vocabulary';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vocabularyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vocabularyControllerCreate$Response(
        params: VocabularyControllerCreate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<VocabularyDto>> {
        return vocabularyControllerCreate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vocabularyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vocabularyControllerCreate(
        params: VocabularyControllerCreate$Params,
        context?: HttpContext,
    ): Observable<VocabularyDto> {
        return this.vocabularyControllerCreate$Response(params, context).pipe(
            map((r: StrictHttpResponse<VocabularyDto>): VocabularyDto => r.body),
        );
    }

    /** Path part for operation `vocabularyControllerFindOne()` */
    static readonly VocabularyControllerFindOnePath = '/api/v1/words/vocabulary/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vocabularyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerFindOne$Response(
        params: VocabularyControllerFindOne$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<VocabularyDto>> {
        return vocabularyControllerFindOne(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vocabularyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerFindOne(
        params: VocabularyControllerFindOne$Params,
        context?: HttpContext,
    ): Observable<VocabularyDto> {
        return this.vocabularyControllerFindOne$Response(params, context).pipe(
            map((r: StrictHttpResponse<VocabularyDto>): VocabularyDto => r.body),
        );
    }

    /** Path part for operation `vocabularyControllerUpdate()` */
    static readonly VocabularyControllerUpdatePath = '/api/v1/words/vocabulary/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vocabularyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vocabularyControllerUpdate$Response(
        params: VocabularyControllerUpdate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<VocabularyDto>> {
        return vocabularyControllerUpdate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vocabularyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vocabularyControllerUpdate(
        params: VocabularyControllerUpdate$Params,
        context?: HttpContext,
    ): Observable<VocabularyDto> {
        return this.vocabularyControllerUpdate$Response(params, context).pipe(
            map((r: StrictHttpResponse<VocabularyDto>): VocabularyDto => r.body),
        );
    }

    /** Path part for operation `vocabularyControllerRemove()` */
    static readonly VocabularyControllerRemovePath = '/api/v1/words/vocabulary/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vocabularyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerRemove$Response(
        params: VocabularyControllerRemove$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<VocabularyDto>> {
        return vocabularyControllerRemove(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vocabularyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vocabularyControllerRemove(
        params: VocabularyControllerRemove$Params,
        context?: HttpContext,
    ): Observable<VocabularyDto> {
        return this.vocabularyControllerRemove$Response(params, context).pipe(
            map((r: StrictHttpResponse<VocabularyDto>): VocabularyDto => r.body),
        );
    }
}
