/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { imageControllerCreate } from '../fn/image/image-controller-create';
import { ImageControllerCreate$Params } from '../fn/image/image-controller-create';
import { imageControllerFindAll } from '../fn/image/image-controller-find-all';
import { ImageControllerFindAll$Params } from '../fn/image/image-controller-find-all';
import { imageControllerFindById } from '../fn/image/image-controller-find-by-id';
import { ImageControllerFindById$Params } from '../fn/image/image-controller-find-by-id';
import { imageControllerSearchImages } from '../fn/image/image-controller-search-images';
import { ImageControllerSearchImages$Params } from '../fn/image/image-controller-search-images';
import { ImageDto } from '../models/image-dto';

@Injectable({ providedIn: 'root' })
export class ImageService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `imageControllerFindAll()` */
    static readonly ImageControllerFindAllPath = '/api/v1/images';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `imageControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerFindAll$Response(
        params?: ImageControllerFindAll$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<ImageDto>>> {
        return imageControllerFindAll(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `imageControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerFindAll(params?: ImageControllerFindAll$Params, context?: HttpContext): Observable<Array<ImageDto>> {
        return this.imageControllerFindAll$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<ImageDto>>): Array<ImageDto> => r.body),
        );
    }

    /** Path part for operation `imageControllerCreate()` */
    static readonly ImageControllerCreatePath = '/api/v1/images';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `imageControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    imageControllerCreate$Response(
        params: ImageControllerCreate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<ImageDto>> {
        return imageControllerCreate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `imageControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    imageControllerCreate(params: ImageControllerCreate$Params, context?: HttpContext): Observable<ImageDto> {
        return this.imageControllerCreate$Response(params, context).pipe(
            map((r: StrictHttpResponse<ImageDto>): ImageDto => r.body),
        );
    }

    /** Path part for operation `imageControllerSearchImages()` */
    static readonly ImageControllerSearchImagesPath = '/api/v1/images/search';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `imageControllerSearchImages()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerSearchImages$Response(
        params: ImageControllerSearchImages$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<void>> {
        return imageControllerSearchImages(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `imageControllerSearchImages$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerSearchImages(params: ImageControllerSearchImages$Params, context?: HttpContext): Observable<void> {
        return this.imageControllerSearchImages$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body),
        );
    }

    /** Path part for operation `imageControllerFindById()` */
    static readonly ImageControllerFindByIdPath = '/api/v1/images/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `imageControllerFindById()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerFindById$Response(
        params: ImageControllerFindById$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<ImageDto>> {
        return imageControllerFindById(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `imageControllerFindById$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    imageControllerFindById(params: ImageControllerFindById$Params, context?: HttpContext): Observable<ImageDto> {
        return this.imageControllerFindById$Response(params, context).pipe(
            map((r: StrictHttpResponse<ImageDto>): ImageDto => r.body),
        );
    }
}
