/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategoryAssociationDto } from '../models/category-association-dto';
import { categoryControllerCreate } from '../fn/category/category-controller-create';
import { CategoryControllerCreate$Params } from '../fn/category/category-controller-create';
import { categoryControllerFindBasicCategories } from '../fn/category/category-controller-find-basic-categories';
import { CategoryControllerFindBasicCategories$Params } from '../fn/category/category-controller-find-basic-categories';
import { categoryControllerFindOne } from '../fn/category/category-controller-find-one';
import { CategoryControllerFindOne$Params } from '../fn/category/category-controller-find-one';
import { categoryControllerFindUserCategories } from '../fn/category/category-controller-find-user-categories';
import { CategoryControllerFindUserCategories$Params } from '../fn/category/category-controller-find-user-categories';
import { categoryControllerFindWordsByCategory } from '../fn/category/category-controller-find-words-by-category';
import { CategoryControllerFindWordsByCategory$Params } from '../fn/category/category-controller-find-words-by-category';
import { categoryControllerRemove } from '../fn/category/category-controller-remove';
import { CategoryControllerRemove$Params } from '../fn/category/category-controller-remove';
import { categoryControllerUpdate } from '../fn/category/category-controller-update';
import { CategoryControllerUpdate$Params } from '../fn/category/category-controller-update';
import { CategoryDto } from '../models/category-dto';
import { PageDto } from '../models/page-dto';
import { PageMetaDto } from '../models/page-meta-dto';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `categoryControllerFindBasicCategories()` */
    static readonly CategoryControllerFindBasicCategoriesPath = '/api/v1/words/category';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerFindBasicCategories()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindBasicCategories$Response(
        params?: CategoryControllerFindBasicCategories$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<CategoryDto>>> {
        return categoryControllerFindBasicCategories(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerFindBasicCategories$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindBasicCategories(
        params?: CategoryControllerFindBasicCategories$Params,
        context?: HttpContext,
    ): Observable<Array<CategoryDto>> {
        return this.categoryControllerFindBasicCategories$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<CategoryDto>>): Array<CategoryDto> => r.body),
        );
    }

    /** Path part for operation `categoryControllerCreate()` */
    static readonly CategoryControllerCreatePath = '/api/v1/words/category';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    categoryControllerCreate$Response(
        params: CategoryControllerCreate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<CategoryDto>> {
        return categoryControllerCreate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    categoryControllerCreate(params: CategoryControllerCreate$Params, context?: HttpContext): Observable<CategoryDto> {
        return this.categoryControllerCreate$Response(params, context).pipe(
            map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body),
        );
    }

    /** Path part for operation `categoryControllerFindUserCategories()` */
    static readonly CategoryControllerFindUserCategoriesPath = '/api/v1/words/category/user';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerFindUserCategories()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindUserCategories$Response(
        params?: CategoryControllerFindUserCategories$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<Array<CategoryDto>>> {
        return categoryControllerFindUserCategories(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerFindUserCategories$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindUserCategories(
        params?: CategoryControllerFindUserCategories$Params,
        context?: HttpContext,
    ): Observable<Array<CategoryDto>> {
        return this.categoryControllerFindUserCategories$Response(params, context).pipe(
            map((r: StrictHttpResponse<Array<CategoryDto>>): Array<CategoryDto> => r.body),
        );
    }

    /** Path part for operation `categoryControllerFindOne()` */
    static readonly CategoryControllerFindOnePath = '/api/v1/words/category/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindOne$Response(
        params: CategoryControllerFindOne$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<CategoryDto>> {
        return categoryControllerFindOne(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindOne(
        params: CategoryControllerFindOne$Params,
        context?: HttpContext,
    ): Observable<CategoryDto> {
        return this.categoryControllerFindOne$Response(params, context).pipe(
            map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body),
        );
    }

    /** Path part for operation `categoryControllerUpdate()` */
    static readonly CategoryControllerUpdatePath = '/api/v1/words/category/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    categoryControllerUpdate$Response(
        params: CategoryControllerUpdate$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<CategoryDto>> {
        return categoryControllerUpdate(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    categoryControllerUpdate(params: CategoryControllerUpdate$Params, context?: HttpContext): Observable<CategoryDto> {
        return this.categoryControllerUpdate$Response(params, context).pipe(
            map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body),
        );
    }

    /** Path part for operation `categoryControllerRemove()` */
    static readonly CategoryControllerRemovePath = '/api/v1/words/category/{id}';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerRemove$Response(
        params: CategoryControllerRemove$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<CategoryDto>> {
        return categoryControllerRemove(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerRemove(params: CategoryControllerRemove$Params, context?: HttpContext): Observable<CategoryDto> {
        return this.categoryControllerRemove$Response(params, context).pipe(
            map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body),
        );
    }

    /** Path part for operation `categoryControllerFindWordsByCategory()` */
    static readonly CategoryControllerFindWordsByCategoryPath = '/api/v1/words/category/{id}/list';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `categoryControllerFindWordsByCategory()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindWordsByCategory$Response(
        params: CategoryControllerFindWordsByCategory$Params,
        context?: HttpContext,
    ): Observable<
        StrictHttpResponse<
            PageDto & {
                data?: Array<CategoryAssociationDto>;
                meta?: PageMetaDto;
            }
        >
    > {
        return categoryControllerFindWordsByCategory(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `categoryControllerFindWordsByCategory$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    categoryControllerFindWordsByCategory(
        params: CategoryControllerFindWordsByCategory$Params,
        context?: HttpContext,
    ): Observable<
        PageDto & {
            data?: Array<CategoryAssociationDto>;
            meta?: PageMetaDto;
        }
    > {
        return this.categoryControllerFindWordsByCategory$Response(params, context).pipe(
            map(
                (
                    r: StrictHttpResponse<
                        PageDto & {
                            data?: Array<CategoryAssociationDto>;
                            meta?: PageMetaDto;
                        }
                    >,
                ): PageDto & {
                    data?: Array<CategoryAssociationDto>;
                    meta?: PageMetaDto;
                } => r.body,
            ),
        );
    }
}
