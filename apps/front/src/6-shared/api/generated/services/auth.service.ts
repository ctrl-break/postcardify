/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authControllerLogin } from '../fn/auth/auth-controller-login';
import { AuthControllerLogin$Params } from '../fn/auth/auth-controller-login';
import { authControllerLogout } from '../fn/auth/auth-controller-logout';
import { AuthControllerLogout$Params } from '../fn/auth/auth-controller-logout';
import { authControllerRefreshTokens } from '../fn/auth/auth-controller-refresh-tokens';
import { AuthControllerRefreshTokens$Params } from '../fn/auth/auth-controller-refresh-tokens';
import { authControllerRegister } from '../fn/auth/auth-controller-register';
import { AuthControllerRegister$Params } from '../fn/auth/auth-controller-register';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
    constructor(config: ApiConfiguration, http: HttpClient) {
        super(config, http);
    }

    /** Path part for operation `authControllerRegister()` */
    static readonly AuthControllerRegisterPath = '/api/v1/auth/register';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerRegister()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRegister$Response(
        params: AuthControllerRegister$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<void>> {
        return authControllerRegister(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerRegister$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRegister(params: AuthControllerRegister$Params, context?: HttpContext): Observable<void> {
        return this.authControllerRegister$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body),
        );
    }

    /** Path part for operation `authControllerLogin()` */
    static readonly AuthControllerLoginPath = '/api/v1/auth/login';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogin()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin$Response(
        params: AuthControllerLogin$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<void>> {
        return authControllerLogin(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogin$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin(params: AuthControllerLogin$Params, context?: HttpContext): Observable<void> {
        return this.authControllerLogin$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body),
        );
    }

    /** Path part for operation `authControllerLogout()` */
    static readonly AuthControllerLogoutPath = '/api/v1/auth/logout';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout$Response(
        params?: AuthControllerLogout$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<void>> {
        return authControllerLogout(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout(params?: AuthControllerLogout$Params, context?: HttpContext): Observable<void> {
        return this.authControllerLogout$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body),
        );
    }

    /** Path part for operation `authControllerRefreshTokens()` */
    static readonly AuthControllerRefreshTokensPath = '/api/v1/auth/refresh-tokens';

    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerRefreshTokens()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerRefreshTokens$Response(
        params?: AuthControllerRefreshTokens$Params,
        context?: HttpContext,
    ): Observable<StrictHttpResponse<void>> {
        return authControllerRefreshTokens(this.http, this.rootUrl, params, context);
    }

    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerRefreshTokens$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerRefreshTokens(params?: AuthControllerRefreshTokens$Params, context?: HttpContext): Observable<void> {
        return this.authControllerRefreshTokens$Response(params, context).pipe(
            map((r: StrictHttpResponse<void>): void => r.body),
        );
    }
}
